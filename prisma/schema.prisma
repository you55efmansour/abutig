// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CITIZEN
}

enum ComplaintStatus {
  UNRESOLVED
  IN_PROGRESS
  RESOLVED
}

model User {
  id          String   @id @default(cuid())
  email       String?  @unique
  phone       String   @unique
  nationalId  String   @unique
  fullName    String
  role        UserRole @default(CITIZEN)
  password    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignedComplaints Complaint[] @relation("AssignedTo")
  complaintLogs      ComplaintLog[]
  statusChanges      ComplaintStatusChange[]

  @@map("users")
}

model ComplaintType {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  icon        String?
  isActive    Boolean @default(true)
  
  complaints Complaint[]

  @@map("complaint_types")
}

model Complaint {
  id            String   @id @default(cuid())
  complainantId String
  typeId        String
  title         String
  description   String
  status        ComplaintStatus @default(UNRESOLVED)
  priority      String   @default("MEDIUM")
  location      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  assignedToId  String?
  resolvedAt    DateTime?
  
  // Audit fields
  createdByUserId        String?
  lastStatusChangedBy    String?
  lastStatusChangedAtUtc DateTime?
  
  complainant Complainant @relation(fields: [complainantId], references: [id])
  type        ComplaintType @relation(fields: [typeId], references: [id])
  assignedTo  User?         @relation("AssignedTo", fields: [assignedToId], references: [id])
  
  files ComplaintFile[]
  logs  ComplaintLog[]
  statusChanges ComplaintStatusChange[]

  @@map("complaints")
}

model Complainant {
  id         String @id @default(cuid())
  fullName   String
  phone      String @unique
  nationalId String @unique
  email      String?
  
  complaints Complaint[]

  @@map("complainants")
}

model ComplaintFile {
  id          String @id @default(cuid())
  complaintId String
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  uploadedAt  DateTime @default(now())
  
  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)

  @@map("complaint_files")
}

model ComplaintLog {
  id          String   @id @default(cuid())
  complaintId String
  userId      String
  action      String
  oldStatus   ComplaintStatus?
  newStatus   ComplaintStatus?
  notes       String?
  createdAt   DateTime @default(now())
  
  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@map("complaint_logs")
}

model ComplaintStatusChange {
  id          String   @id @default(cuid())
  complaintId String
  userId      String
  oldStatus   ComplaintStatus
  newStatus   ComplaintStatus
  changedAt   DateTime @default(now())
  notes       String?
  
  complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@map("complaint_status_changes")
}