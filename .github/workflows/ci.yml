name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          cd server && npm audit --audit-level=moderate

      - name: Run SAST scan
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Setup test database
        run: |
          cd server
          npx prisma generate
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run backend tests
        run: |
          cd server
          npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install frontend dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Setup database
        run: |
          cd server
          npx prisma generate
          npx prisma migrate deploy
          npx prisma db seed

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start backend server
        run: |
          cd server
          npm start &
          sleep 10

      - name: Run E2E tests
        run: |
          npm run test:e2e
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Setup database
        run: |
          cd server
          npx prisma generate
          npx prisma migrate deploy
          npx prisma db seed

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start backend server
        run: |
          cd server
          npm start &
          sleep 10

      - name: Run mobile tests
        run: |
          npm run test:e2e:mobile
        env:
          CI: true

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          cd server
          npm start &
          sleep 10

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs:
      [
        security-audit,
        backend-tests,
        frontend-tests,
        e2e-tests,
        mobile-tests,
        performance-test,
      ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Railway
        uses: bervProject/railway-deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Start application
        run: |
          cd server
          npm start &
          sleep 10

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://localhost:3001"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      - name: Upload ZAP results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: zap-results
          path: .zap/
          retention-days: 30
